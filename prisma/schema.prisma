generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Custom messages structure for storing message details
type MessagesMessages {
  id        String   @map("_id") @db.ObjectId
  createdAt DateTime @db.Date
  from      String   @db.ObjectId
  message   String
  msgType   String
}

// Friends model to store friends and friend requests
model Friends {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  friends  String[] @db.ObjectId
  requests String[] @db.ObjectId
  userId   String   @db.ObjectId @unique
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Messages model for user communication
model Messages {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime           @db.Date
  messages  MessagesMessages[]
  userA     String             @db.ObjectId
  userB     String             @db.ObjectId
}

// Custom user schema with `auth.js` fields added
model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  email              String    @unique(map: "email")
  username           String    @unique(map: "username")
  password           String
  bio                String?
  firstName          String?
  lastName           String?
  gender             String?
  relationshipStatus String?
  profileImage       String?
  pin                String?

  // Fields used by `auth.js`
  name          String?
  emailVerified DateTime?
  image         String?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  friends Friends?
  userStatus UserStatus?
}



model UserStatus {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @db.ObjectId @unique
  lastSeen DateTime @db.Date
  isOnline Boolean

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
