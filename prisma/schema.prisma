generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Custom messages structure for storing message details
type MessagesMessages {
  id        String   @map("_id") @db.ObjectId
  createdAt DateTime @db.Date
  from      String   @db.ObjectId
  message   String
  msgType   String
}

// Friends model to store friends and friend requests
model Friends {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  friends  String[]
  requests String[]
  userId   String   @db.ObjectId @unique
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Messages model for user communication
model Messages {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime           @db.Date
  messages  MessagesMessages[]
  userA     String             @db.ObjectId
  userB     String             @db.ObjectId
}

// Custom user schema with `auth.js` fields added
model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  email              String    @unique(map: "email")
  username           String    @unique(map: "username")
  password           String
  bio                String?
  firstName          String?
  lastName           String?
  gender             String?
  relationshipStatus String?
  profileImage       String?
  pin                String?

  // Fields used by `auth.js`
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  friends Friends?
}

// Auth.js account model
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Auth.js session model
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Auth.js verification token model
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support with `auth.js`
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}